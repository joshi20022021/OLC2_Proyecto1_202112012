//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LanguageLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, MAS=21, MENOS=22, MULT=23, DIV=24, MOD=25, 
		IGUAL=26, PARENTESIS_IZQ=27, PARENTESIS_DER=28, L_CORCHETE=29, R_CORCHETE=30, 
		PUNTOYCOMA=31, MAYOR=32, MENOR=33, MAYOR_IGUAL=34, MENOR_IGUAL=35, IGUALDAD=36, 
		DIFERENTE=37, VERDADERO=38, FALSO=39, NULO=40, LIT_STRING=41, LIT_RUNE=42, 
		LIT_FLOAT=43, LIT_ENTERO=44, IDENTIFICADOR=45, ESPACIOS=46, COMENTARIO=47, 
		COMENTARIO_MULTILINEA=48, IMPRIMIR=49;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "MAS", "MENOS", "MULT", "DIV", "MOD", "IGUAL", 
		"PARENTESIS_IZQ", "PARENTESIS_DER", "L_CORCHETE", "R_CORCHETE", "PUNTOYCOMA", 
		"MAYOR", "MENOR", "MAYOR_IGUAL", "MENOR_IGUAL", "IGUALDAD", "DIFERENTE", 
		"VERDADERO", "FALSO", "NULO", "LIT_STRING", "LIT_RUNE", "LIT_FLOAT", "LIT_ENTERO", 
		"IDENTIFICADOR", "ESPACIOS", "COMENTARIO", "COMENTARIO_MULTILINEA", "IMPRIMIR"
	};


	public LanguageLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LanguageLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'func'", "'main'", "'break'", "'continue'", "'return'", "'{'", 
		"'}'", "'if'", "'else'", "'var'", "':='", "'switch'", "'case'", "':'", 
		"'default'", "'for'", "','", "'&&'", "'||'", "'!'", "'+'", "'-'", "'*'", 
		"'/'", "'%'", "'='", "'('", "')'", "'['", "']'", "';'", "'>'", "'<'", 
		"'>='", "'<='", "'=='", "'!='", "'true'", "'false'", "'nil'", null, null, 
		null, null, null, null, null, null, "'fmt.Println'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "MAS", "MENOS", 
		"MULT", "DIV", "MOD", "IGUAL", "PARENTESIS_IZQ", "PARENTESIS_DER", "L_CORCHETE", 
		"R_CORCHETE", "PUNTOYCOMA", "MAYOR", "MENOR", "MAYOR_IGUAL", "MENOR_IGUAL", 
		"IGUALDAD", "DIFERENTE", "VERDADERO", "FALSO", "NULO", "LIT_STRING", "LIT_RUNE", 
		"LIT_FLOAT", "LIT_ENTERO", "IDENTIFICADOR", "ESPACIOS", "COMENTARIO", 
		"COMENTARIO_MULTILINEA", "IMPRIMIR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LanguageLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,49,319,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,1,0,1,
		0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,
		7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,17,1,17,
		1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,
		1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,
		1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,
		1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,39,
		1,39,1,39,1,39,1,40,1,40,5,40,242,8,40,10,40,12,40,245,9,40,1,40,1,40,
		1,41,1,41,1,41,1,41,1,42,4,42,254,8,42,11,42,12,42,255,1,42,1,42,4,42,
		260,8,42,11,42,12,42,261,1,43,4,43,265,8,43,11,43,12,43,266,1,44,1,44,
		5,44,271,8,44,10,44,12,44,274,9,44,1,45,4,45,277,8,45,11,45,12,45,278,
		1,45,1,45,1,46,1,46,1,46,1,46,5,46,287,8,46,10,46,12,46,290,9,46,1,46,
		1,46,1,47,1,47,1,47,1,47,5,47,298,8,47,10,47,12,47,301,9,47,1,47,1,47,
		1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
		1,48,1,299,0,49,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
		12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
		24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
		36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,
		48,97,49,1,0,7,1,0,34,34,3,0,10,10,13,13,39,39,1,0,48,57,3,0,65,90,95,
		95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,2,0,10,10,
		13,13,326,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
		0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
		1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
		0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
		1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
		0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
		1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
		0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
		1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,
		0,1,99,1,0,0,0,3,104,1,0,0,0,5,109,1,0,0,0,7,115,1,0,0,0,9,124,1,0,0,0,
		11,131,1,0,0,0,13,133,1,0,0,0,15,135,1,0,0,0,17,138,1,0,0,0,19,143,1,0,
		0,0,21,147,1,0,0,0,23,150,1,0,0,0,25,157,1,0,0,0,27,162,1,0,0,0,29,164,
		1,0,0,0,31,172,1,0,0,0,33,176,1,0,0,0,35,178,1,0,0,0,37,181,1,0,0,0,39,
		184,1,0,0,0,41,186,1,0,0,0,43,188,1,0,0,0,45,190,1,0,0,0,47,192,1,0,0,
		0,49,194,1,0,0,0,51,196,1,0,0,0,53,198,1,0,0,0,55,200,1,0,0,0,57,202,1,
		0,0,0,59,204,1,0,0,0,61,206,1,0,0,0,63,208,1,0,0,0,65,210,1,0,0,0,67,212,
		1,0,0,0,69,215,1,0,0,0,71,218,1,0,0,0,73,221,1,0,0,0,75,224,1,0,0,0,77,
		229,1,0,0,0,79,235,1,0,0,0,81,239,1,0,0,0,83,248,1,0,0,0,85,253,1,0,0,
		0,87,264,1,0,0,0,89,268,1,0,0,0,91,276,1,0,0,0,93,282,1,0,0,0,95,293,1,
		0,0,0,97,307,1,0,0,0,99,100,5,102,0,0,100,101,5,117,0,0,101,102,5,110,
		0,0,102,103,5,99,0,0,103,2,1,0,0,0,104,105,5,109,0,0,105,106,5,97,0,0,
		106,107,5,105,0,0,107,108,5,110,0,0,108,4,1,0,0,0,109,110,5,98,0,0,110,
		111,5,114,0,0,111,112,5,101,0,0,112,113,5,97,0,0,113,114,5,107,0,0,114,
		6,1,0,0,0,115,116,5,99,0,0,116,117,5,111,0,0,117,118,5,110,0,0,118,119,
		5,116,0,0,119,120,5,105,0,0,120,121,5,110,0,0,121,122,5,117,0,0,122,123,
		5,101,0,0,123,8,1,0,0,0,124,125,5,114,0,0,125,126,5,101,0,0,126,127,5,
		116,0,0,127,128,5,117,0,0,128,129,5,114,0,0,129,130,5,110,0,0,130,10,1,
		0,0,0,131,132,5,123,0,0,132,12,1,0,0,0,133,134,5,125,0,0,134,14,1,0,0,
		0,135,136,5,105,0,0,136,137,5,102,0,0,137,16,1,0,0,0,138,139,5,101,0,0,
		139,140,5,108,0,0,140,141,5,115,0,0,141,142,5,101,0,0,142,18,1,0,0,0,143,
		144,5,118,0,0,144,145,5,97,0,0,145,146,5,114,0,0,146,20,1,0,0,0,147,148,
		5,58,0,0,148,149,5,61,0,0,149,22,1,0,0,0,150,151,5,115,0,0,151,152,5,119,
		0,0,152,153,5,105,0,0,153,154,5,116,0,0,154,155,5,99,0,0,155,156,5,104,
		0,0,156,24,1,0,0,0,157,158,5,99,0,0,158,159,5,97,0,0,159,160,5,115,0,0,
		160,161,5,101,0,0,161,26,1,0,0,0,162,163,5,58,0,0,163,28,1,0,0,0,164,165,
		5,100,0,0,165,166,5,101,0,0,166,167,5,102,0,0,167,168,5,97,0,0,168,169,
		5,117,0,0,169,170,5,108,0,0,170,171,5,116,0,0,171,30,1,0,0,0,172,173,5,
		102,0,0,173,174,5,111,0,0,174,175,5,114,0,0,175,32,1,0,0,0,176,177,5,44,
		0,0,177,34,1,0,0,0,178,179,5,38,0,0,179,180,5,38,0,0,180,36,1,0,0,0,181,
		182,5,124,0,0,182,183,5,124,0,0,183,38,1,0,0,0,184,185,5,33,0,0,185,40,
		1,0,0,0,186,187,5,43,0,0,187,42,1,0,0,0,188,189,5,45,0,0,189,44,1,0,0,
		0,190,191,5,42,0,0,191,46,1,0,0,0,192,193,5,47,0,0,193,48,1,0,0,0,194,
		195,5,37,0,0,195,50,1,0,0,0,196,197,5,61,0,0,197,52,1,0,0,0,198,199,5,
		40,0,0,199,54,1,0,0,0,200,201,5,41,0,0,201,56,1,0,0,0,202,203,5,91,0,0,
		203,58,1,0,0,0,204,205,5,93,0,0,205,60,1,0,0,0,206,207,5,59,0,0,207,62,
		1,0,0,0,208,209,5,62,0,0,209,64,1,0,0,0,210,211,5,60,0,0,211,66,1,0,0,
		0,212,213,5,62,0,0,213,214,5,61,0,0,214,68,1,0,0,0,215,216,5,60,0,0,216,
		217,5,61,0,0,217,70,1,0,0,0,218,219,5,61,0,0,219,220,5,61,0,0,220,72,1,
		0,0,0,221,222,5,33,0,0,222,223,5,61,0,0,223,74,1,0,0,0,224,225,5,116,0,
		0,225,226,5,114,0,0,226,227,5,117,0,0,227,228,5,101,0,0,228,76,1,0,0,0,
		229,230,5,102,0,0,230,231,5,97,0,0,231,232,5,108,0,0,232,233,5,115,0,0,
		233,234,5,101,0,0,234,78,1,0,0,0,235,236,5,110,0,0,236,237,5,105,0,0,237,
		238,5,108,0,0,238,80,1,0,0,0,239,243,5,34,0,0,240,242,8,0,0,0,241,240,
		1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,246,1,0,0,
		0,245,243,1,0,0,0,246,247,5,34,0,0,247,82,1,0,0,0,248,249,5,39,0,0,249,
		250,8,1,0,0,250,251,5,39,0,0,251,84,1,0,0,0,252,254,7,2,0,0,253,252,1,
		0,0,0,254,255,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,257,1,0,0,0,
		257,259,5,46,0,0,258,260,7,2,0,0,259,258,1,0,0,0,260,261,1,0,0,0,261,259,
		1,0,0,0,261,262,1,0,0,0,262,86,1,0,0,0,263,265,7,2,0,0,264,263,1,0,0,0,
		265,266,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,88,1,0,0,0,268,272,
		7,3,0,0,269,271,7,4,0,0,270,269,1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,
		0,272,273,1,0,0,0,273,90,1,0,0,0,274,272,1,0,0,0,275,277,7,5,0,0,276,275,
		1,0,0,0,277,278,1,0,0,0,278,276,1,0,0,0,278,279,1,0,0,0,279,280,1,0,0,
		0,280,281,6,45,0,0,281,92,1,0,0,0,282,283,5,47,0,0,283,284,5,47,0,0,284,
		288,1,0,0,0,285,287,8,6,0,0,286,285,1,0,0,0,287,290,1,0,0,0,288,286,1,
		0,0,0,288,289,1,0,0,0,289,291,1,0,0,0,290,288,1,0,0,0,291,292,6,46,0,0,
		292,94,1,0,0,0,293,294,5,47,0,0,294,295,5,42,0,0,295,299,1,0,0,0,296,298,
		9,0,0,0,297,296,1,0,0,0,298,301,1,0,0,0,299,300,1,0,0,0,299,297,1,0,0,
		0,300,302,1,0,0,0,301,299,1,0,0,0,302,303,5,42,0,0,303,304,5,47,0,0,304,
		305,1,0,0,0,305,306,6,47,0,0,306,96,1,0,0,0,307,308,5,102,0,0,308,309,
		5,109,0,0,309,310,5,116,0,0,310,311,5,46,0,0,311,312,5,80,0,0,312,313,
		5,114,0,0,313,314,5,105,0,0,314,315,5,110,0,0,315,316,5,116,0,0,316,317,
		5,108,0,0,317,318,5,110,0,0,318,98,1,0,0,0,9,0,243,255,261,266,272,278,
		288,299,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
