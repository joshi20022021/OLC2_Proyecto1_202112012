//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LanguageLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, MAS=22, MENOS=23, MULT=24, DIV=25, 
		MOD=26, IGUAL=27, PARENTESIS_IZQ=28, PARENTESIS_DER=29, L_CORCHETE=30, 
		R_CORCHETE=31, PUNTOYCOMA=32, MAYOR=33, MENOR=34, MAYOR_IGUAL=35, MENOR_IGUAL=36, 
		IGUALDAD=37, DIFERENTE=38, VERDADERO=39, FALSO=40, NULO=41, LIT_STRING=42, 
		LIT_RUNE=43, LIT_FLOAT=44, LIT_ENTERO=45, IDENTIFICADOR=46, ESPACIOS=47, 
		COMENTARIO=48, COMENTARIO_MULTILINEA=49, IMPRIMIR=50;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "MAS", "MENOS", "MULT", "DIV", "MOD", 
		"IGUAL", "PARENTESIS_IZQ", "PARENTESIS_DER", "L_CORCHETE", "R_CORCHETE", 
		"PUNTOYCOMA", "MAYOR", "MENOR", "MAYOR_IGUAL", "MENOR_IGUAL", "IGUALDAD", 
		"DIFERENTE", "VERDADERO", "FALSO", "NULO", "LIT_STRING", "LIT_RUNE", "LIT_FLOAT", 
		"LIT_ENTERO", "IDENTIFICADOR", "ESPACIOS", "COMENTARIO", "COMENTARIO_MULTILINEA", 
		"IMPRIMIR"
	};


	public LanguageLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LanguageLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'func'", "'main'", "'break'", "'continue'", "'return'", "'{'", 
		"'}'", "'if'", "'else'", "'var'", "':='", "'switch'", "'case'", "':'", 
		"'default'", "'for'", "','", "'range'", "'&&'", "'||'", "'!'", "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'='", "'('", "')'", "'['", "']'", "';'", 
		"'>'", "'<'", "'>='", "'<='", "'=='", "'!='", "'true'", "'false'", "'nil'", 
		null, null, null, null, null, null, null, null, "'fmt.Println'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "MAS", "MENOS", 
		"MULT", "DIV", "MOD", "IGUAL", "PARENTESIS_IZQ", "PARENTESIS_DER", "L_CORCHETE", 
		"R_CORCHETE", "PUNTOYCOMA", "MAYOR", "MENOR", "MAYOR_IGUAL", "MENOR_IGUAL", 
		"IGUALDAD", "DIFERENTE", "VERDADERO", "FALSO", "NULO", "LIT_STRING", "LIT_RUNE", 
		"LIT_FLOAT", "LIT_ENTERO", "IDENTIFICADOR", "ESPACIOS", "COMENTARIO", 
		"COMENTARIO_MULTILINEA", "IMPRIMIR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LanguageLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,50,327,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,
		1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,
		1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,
		1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,
		1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,
		1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,38,
		1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,5,41,
		250,8,41,10,41,12,41,253,9,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,4,43,
		262,8,43,11,43,12,43,263,1,43,1,43,4,43,268,8,43,11,43,12,43,269,1,44,
		4,44,273,8,44,11,44,12,44,274,1,45,1,45,5,45,279,8,45,10,45,12,45,282,
		9,45,1,46,4,46,285,8,46,11,46,12,46,286,1,46,1,46,1,47,1,47,1,47,1,47,
		5,47,295,8,47,10,47,12,47,298,9,47,1,47,1,47,1,48,1,48,1,48,1,48,5,48,
		306,8,48,10,48,12,48,309,9,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,
		1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,307,0,50,1,1,3,2,5,3,7,
		4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
		17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
		29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,
		41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,1,0,7,1,0,34,
		34,3,0,10,10,13,13,39,39,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,
		90,95,95,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,334,0,1,1,0,0,0,0,
		3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
		0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
		1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
		0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
		1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
		0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
		1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,
		0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
		1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,1,101,1,0,
		0,0,3,106,1,0,0,0,5,111,1,0,0,0,7,117,1,0,0,0,9,126,1,0,0,0,11,133,1,0,
		0,0,13,135,1,0,0,0,15,137,1,0,0,0,17,140,1,0,0,0,19,145,1,0,0,0,21,149,
		1,0,0,0,23,152,1,0,0,0,25,159,1,0,0,0,27,164,1,0,0,0,29,166,1,0,0,0,31,
		174,1,0,0,0,33,178,1,0,0,0,35,180,1,0,0,0,37,186,1,0,0,0,39,189,1,0,0,
		0,41,192,1,0,0,0,43,194,1,0,0,0,45,196,1,0,0,0,47,198,1,0,0,0,49,200,1,
		0,0,0,51,202,1,0,0,0,53,204,1,0,0,0,55,206,1,0,0,0,57,208,1,0,0,0,59,210,
		1,0,0,0,61,212,1,0,0,0,63,214,1,0,0,0,65,216,1,0,0,0,67,218,1,0,0,0,69,
		220,1,0,0,0,71,223,1,0,0,0,73,226,1,0,0,0,75,229,1,0,0,0,77,232,1,0,0,
		0,79,237,1,0,0,0,81,243,1,0,0,0,83,247,1,0,0,0,85,256,1,0,0,0,87,261,1,
		0,0,0,89,272,1,0,0,0,91,276,1,0,0,0,93,284,1,0,0,0,95,290,1,0,0,0,97,301,
		1,0,0,0,99,315,1,0,0,0,101,102,5,102,0,0,102,103,5,117,0,0,103,104,5,110,
		0,0,104,105,5,99,0,0,105,2,1,0,0,0,106,107,5,109,0,0,107,108,5,97,0,0,
		108,109,5,105,0,0,109,110,5,110,0,0,110,4,1,0,0,0,111,112,5,98,0,0,112,
		113,5,114,0,0,113,114,5,101,0,0,114,115,5,97,0,0,115,116,5,107,0,0,116,
		6,1,0,0,0,117,118,5,99,0,0,118,119,5,111,0,0,119,120,5,110,0,0,120,121,
		5,116,0,0,121,122,5,105,0,0,122,123,5,110,0,0,123,124,5,117,0,0,124,125,
		5,101,0,0,125,8,1,0,0,0,126,127,5,114,0,0,127,128,5,101,0,0,128,129,5,
		116,0,0,129,130,5,117,0,0,130,131,5,114,0,0,131,132,5,110,0,0,132,10,1,
		0,0,0,133,134,5,123,0,0,134,12,1,0,0,0,135,136,5,125,0,0,136,14,1,0,0,
		0,137,138,5,105,0,0,138,139,5,102,0,0,139,16,1,0,0,0,140,141,5,101,0,0,
		141,142,5,108,0,0,142,143,5,115,0,0,143,144,5,101,0,0,144,18,1,0,0,0,145,
		146,5,118,0,0,146,147,5,97,0,0,147,148,5,114,0,0,148,20,1,0,0,0,149,150,
		5,58,0,0,150,151,5,61,0,0,151,22,1,0,0,0,152,153,5,115,0,0,153,154,5,119,
		0,0,154,155,5,105,0,0,155,156,5,116,0,0,156,157,5,99,0,0,157,158,5,104,
		0,0,158,24,1,0,0,0,159,160,5,99,0,0,160,161,5,97,0,0,161,162,5,115,0,0,
		162,163,5,101,0,0,163,26,1,0,0,0,164,165,5,58,0,0,165,28,1,0,0,0,166,167,
		5,100,0,0,167,168,5,101,0,0,168,169,5,102,0,0,169,170,5,97,0,0,170,171,
		5,117,0,0,171,172,5,108,0,0,172,173,5,116,0,0,173,30,1,0,0,0,174,175,5,
		102,0,0,175,176,5,111,0,0,176,177,5,114,0,0,177,32,1,0,0,0,178,179,5,44,
		0,0,179,34,1,0,0,0,180,181,5,114,0,0,181,182,5,97,0,0,182,183,5,110,0,
		0,183,184,5,103,0,0,184,185,5,101,0,0,185,36,1,0,0,0,186,187,5,38,0,0,
		187,188,5,38,0,0,188,38,1,0,0,0,189,190,5,124,0,0,190,191,5,124,0,0,191,
		40,1,0,0,0,192,193,5,33,0,0,193,42,1,0,0,0,194,195,5,43,0,0,195,44,1,0,
		0,0,196,197,5,45,0,0,197,46,1,0,0,0,198,199,5,42,0,0,199,48,1,0,0,0,200,
		201,5,47,0,0,201,50,1,0,0,0,202,203,5,37,0,0,203,52,1,0,0,0,204,205,5,
		61,0,0,205,54,1,0,0,0,206,207,5,40,0,0,207,56,1,0,0,0,208,209,5,41,0,0,
		209,58,1,0,0,0,210,211,5,91,0,0,211,60,1,0,0,0,212,213,5,93,0,0,213,62,
		1,0,0,0,214,215,5,59,0,0,215,64,1,0,0,0,216,217,5,62,0,0,217,66,1,0,0,
		0,218,219,5,60,0,0,219,68,1,0,0,0,220,221,5,62,0,0,221,222,5,61,0,0,222,
		70,1,0,0,0,223,224,5,60,0,0,224,225,5,61,0,0,225,72,1,0,0,0,226,227,5,
		61,0,0,227,228,5,61,0,0,228,74,1,0,0,0,229,230,5,33,0,0,230,231,5,61,0,
		0,231,76,1,0,0,0,232,233,5,116,0,0,233,234,5,114,0,0,234,235,5,117,0,0,
		235,236,5,101,0,0,236,78,1,0,0,0,237,238,5,102,0,0,238,239,5,97,0,0,239,
		240,5,108,0,0,240,241,5,115,0,0,241,242,5,101,0,0,242,80,1,0,0,0,243,244,
		5,110,0,0,244,245,5,105,0,0,245,246,5,108,0,0,246,82,1,0,0,0,247,251,5,
		34,0,0,248,250,8,0,0,0,249,248,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,
		251,252,1,0,0,0,252,254,1,0,0,0,253,251,1,0,0,0,254,255,5,34,0,0,255,84,
		1,0,0,0,256,257,5,39,0,0,257,258,8,1,0,0,258,259,5,39,0,0,259,86,1,0,0,
		0,260,262,7,2,0,0,261,260,1,0,0,0,262,263,1,0,0,0,263,261,1,0,0,0,263,
		264,1,0,0,0,264,265,1,0,0,0,265,267,5,46,0,0,266,268,7,2,0,0,267,266,1,
		0,0,0,268,269,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,88,1,0,0,0,271,
		273,7,2,0,0,272,271,1,0,0,0,273,274,1,0,0,0,274,272,1,0,0,0,274,275,1,
		0,0,0,275,90,1,0,0,0,276,280,7,3,0,0,277,279,7,4,0,0,278,277,1,0,0,0,279,
		282,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,92,1,0,0,0,282,280,1,0,
		0,0,283,285,7,5,0,0,284,283,1,0,0,0,285,286,1,0,0,0,286,284,1,0,0,0,286,
		287,1,0,0,0,287,288,1,0,0,0,288,289,6,46,0,0,289,94,1,0,0,0,290,291,5,
		47,0,0,291,292,5,47,0,0,292,296,1,0,0,0,293,295,8,6,0,0,294,293,1,0,0,
		0,295,298,1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,299,1,0,0,0,298,
		296,1,0,0,0,299,300,6,47,0,0,300,96,1,0,0,0,301,302,5,47,0,0,302,303,5,
		42,0,0,303,307,1,0,0,0,304,306,9,0,0,0,305,304,1,0,0,0,306,309,1,0,0,0,
		307,308,1,0,0,0,307,305,1,0,0,0,308,310,1,0,0,0,309,307,1,0,0,0,310,311,
		5,42,0,0,311,312,5,47,0,0,312,313,1,0,0,0,313,314,6,48,0,0,314,98,1,0,
		0,0,315,316,5,102,0,0,316,317,5,109,0,0,317,318,5,116,0,0,318,319,5,46,
		0,0,319,320,5,80,0,0,320,321,5,114,0,0,321,322,5,105,0,0,322,323,5,110,
		0,0,323,324,5,116,0,0,324,325,5,108,0,0,325,326,5,110,0,0,326,100,1,0,
		0,0,9,0,251,263,269,274,280,286,296,307,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
