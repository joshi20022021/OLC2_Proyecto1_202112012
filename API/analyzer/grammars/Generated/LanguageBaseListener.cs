//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ILanguageListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class LanguageBaseListener : ILanguageListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.programa"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrograma([NotNull] LanguageParser.ProgramaContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.programa"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrograma([NotNull] LanguageParser.ProgramaContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.funcionMain"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFuncionMain([NotNull] LanguageParser.FuncionMainContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.funcionMain"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFuncionMain([NotNull] LanguageParser.FuncionMainContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.bloque"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBloque([NotNull] LanguageParser.BloqueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.bloque"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBloque([NotNull] LanguageParser.BloqueContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.sentencia"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSentencia([NotNull] LanguageParser.SentenciaContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.sentencia"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSentencia([NotNull] LanguageParser.SentenciaContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IfElse</c>
	/// labeled alternative in <see cref="LanguageParser.ifStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfElse([NotNull] LanguageParser.IfElseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IfElse</c>
	/// labeled alternative in <see cref="LanguageParser.ifStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfElse([NotNull] LanguageParser.IfElseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.declaracion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeclaracion([NotNull] LanguageParser.DeclaracionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.declaracion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeclaracion([NotNull] LanguageParser.DeclaracionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Asignar</c>
	/// labeled alternative in <see cref="LanguageParser.asignacion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAsignar([NotNull] LanguageParser.AsignarContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Asignar</c>
	/// labeled alternative in <see cref="LanguageParser.asignacion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAsignar([NotNull] LanguageParser.AsignarContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.tipo"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTipo([NotNull] LanguageParser.TipoContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.tipo"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTipo([NotNull] LanguageParser.TipoContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SwitchCase</c>
	/// labeled alternative in <see cref="LanguageParser.switchStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSwitchCase([NotNull] LanguageParser.SwitchCaseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SwitchCase</c>
	/// labeled alternative in <see cref="LanguageParser.switchStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSwitchCase([NotNull] LanguageParser.SwitchCaseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.caseBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCaseBlock([NotNull] LanguageParser.CaseBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.caseBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCaseBlock([NotNull] LanguageParser.CaseBlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.defaultBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDefaultBlock([NotNull] LanguageParser.DefaultBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.defaultBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDefaultBlock([NotNull] LanguageParser.DefaultBlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ForCondicion</c>
	/// labeled alternative in <see cref="LanguageParser.forStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForCondicion([NotNull] LanguageParser.ForCondicionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ForCondicion</c>
	/// labeled alternative in <see cref="LanguageParser.forStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForCondicion([NotNull] LanguageParser.ForCondicionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ForClasico</c>
	/// labeled alternative in <see cref="LanguageParser.forStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForClasico([NotNull] LanguageParser.ForClasicoContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ForClasico</c>
	/// labeled alternative in <see cref="LanguageParser.forStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForClasico([NotNull] LanguageParser.ForClasicoContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Incremento</c>
	/// labeled alternative in <see cref="LanguageParser.contador"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIncremento([NotNull] LanguageParser.IncrementoContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Incremento</c>
	/// labeled alternative in <see cref="LanguageParser.contador"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIncremento([NotNull] LanguageParser.IncrementoContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Decremento</c>
	/// labeled alternative in <see cref="LanguageParser.contador"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDecremento([NotNull] LanguageParser.DecrementoContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Decremento</c>
	/// labeled alternative in <see cref="LanguageParser.contador"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDecremento([NotNull] LanguageParser.DecrementoContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.sliceLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSliceLiteral([NotNull] LanguageParser.SliceLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.sliceLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSliceLiteral([NotNull] LanguageParser.SliceLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Imprime</c>
	/// labeled alternative in <see cref="LanguageParser.imprimir"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterImprime([NotNull] LanguageParser.ImprimeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Imprime</c>
	/// labeled alternative in <see cref="LanguageParser.imprimir"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitImprime([NotNull] LanguageParser.ImprimeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ComparacionDiferente</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterComparacionDiferente([NotNull] LanguageParser.ComparacionDiferenteContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ComparacionDiferente</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitComparacionDiferente([NotNull] LanguageParser.ComparacionDiferenteContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ComparacionIgual</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterComparacionIgual([NotNull] LanguageParser.ComparacionIgualContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ComparacionIgual</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitComparacionIgual([NotNull] LanguageParser.ComparacionIgualContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Or</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOr([NotNull] LanguageParser.OrContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Or</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOr([NotNull] LanguageParser.OrContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralCadena</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralCadena([NotNull] LanguageParser.LiteralCadenaContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralCadena</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralCadena([NotNull] LanguageParser.LiteralCadenaContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Parentesis</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParentesis([NotNull] LanguageParser.ParentesisContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Parentesis</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParentesis([NotNull] LanguageParser.ParentesisContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Modulo</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterModulo([NotNull] LanguageParser.ModuloContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Modulo</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitModulo([NotNull] LanguageParser.ModuloContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralEntero</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralEntero([NotNull] LanguageParser.LiteralEnteroContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralEntero</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralEntero([NotNull] LanguageParser.LiteralEnteroContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralRune</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralRune([NotNull] LanguageParser.LiteralRuneContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralRune</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralRune([NotNull] LanguageParser.LiteralRuneContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Multiplicacion</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiplicacion([NotNull] LanguageParser.MultiplicacionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Multiplicacion</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiplicacion([NotNull] LanguageParser.MultiplicacionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralVerdadero</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralVerdadero([NotNull] LanguageParser.LiteralVerdaderoContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralVerdadero</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralVerdadero([NotNull] LanguageParser.LiteralVerdaderoContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralFlotante</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralFlotante([NotNull] LanguageParser.LiteralFlotanteContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralFlotante</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralFlotante([NotNull] LanguageParser.LiteralFlotanteContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Suma</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSuma([NotNull] LanguageParser.SumaContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Suma</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSuma([NotNull] LanguageParser.SumaContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Not</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNot([NotNull] LanguageParser.NotContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Not</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNot([NotNull] LanguageParser.NotContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MenorOIgual</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMenorOIgual([NotNull] LanguageParser.MenorOIgualContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MenorOIgual</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMenorOIgual([NotNull] LanguageParser.MenorOIgualContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Slice</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSlice([NotNull] LanguageParser.SliceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Slice</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSlice([NotNull] LanguageParser.SliceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>And</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAnd([NotNull] LanguageParser.AndContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>And</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAnd([NotNull] LanguageParser.AndContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralNulo</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralNulo([NotNull] LanguageParser.LiteralNuloContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralNulo</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralNulo([NotNull] LanguageParser.LiteralNuloContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MayorOIgual</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMayorOIgual([NotNull] LanguageParser.MayorOIgualContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MayorOIgual</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMayorOIgual([NotNull] LanguageParser.MayorOIgualContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralFalso</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralFalso([NotNull] LanguageParser.LiteralFalsoContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralFalso</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralFalso([NotNull] LanguageParser.LiteralFalsoContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Division</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDivision([NotNull] LanguageParser.DivisionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Division</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDivision([NotNull] LanguageParser.DivisionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MayorQue</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMayorQue([NotNull] LanguageParser.MayorQueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MayorQue</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMayorQue([NotNull] LanguageParser.MayorQueContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Identificador</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentificador([NotNull] LanguageParser.IdentificadorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Identificador</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentificador([NotNull] LanguageParser.IdentificadorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Resta</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterResta([NotNull] LanguageParser.RestaContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Resta</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitResta([NotNull] LanguageParser.RestaContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MenorQue</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMenorQue([NotNull] LanguageParser.MenorQueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MenorQue</c>
	/// labeled alternative in <see cref="LanguageParser.expresion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMenorQue([NotNull] LanguageParser.MenorQueContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
